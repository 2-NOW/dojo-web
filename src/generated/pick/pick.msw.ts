/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { faker } from "@faker-js/faker";
import { http, HttpResponse, delay } from "msw";
import type { DojoApiResponseReceivedPickListGetResponse } from ".././model";

export const getGetReceivedPickListResponseMock = (
  overrideResponse: Partial<DojoApiResponseReceivedPickListGetResponse> = {},
): DojoApiResponseReceivedPickListGetResponse => ({
  data: faker.helpers.arrayElement([
    {
      pickList: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
      ).map(() => ({
        latestPickedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
        questionContent: faker.word.sample(),
        questionEmojiImageUrl: faker.word.sample(),
        questionId: faker.word.sample(),
        totalReceivedPickCount: faker.number.int({
          min: undefined,
          max: undefined,
        }),
      })),
      sort: faker.helpers.arrayElement(["LATEST", "MOST_PICKED"] as const),
    },
    undefined,
  ]),
  error: faker.helpers.arrayElement([
    {
      code: faker.word.sample(),
      message: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    },
    undefined,
  ]),
  success: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getGetReceivedPickListMockHandler = (
  overrideResponse?:
    | DojoApiResponseReceivedPickListGetResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) =>
        | Promise<DojoApiResponseReceivedPickListGetResponse>
        | DojoApiResponseReceivedPickListGetResponse),
) => {
  return http.get(
    "http://dojo-backend-eb-env.eba-33qhzuax.ap-northeast-2.elasticbeanstalk.com/pick/picked-list",
    async (info) => {
      await delay(1000);
      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetReceivedPickListResponseMock(),
        ),
        {
          status: 200,
          headers: {
            "Content-Type": "application/json",
          },
        },
      );
    },
  );
};
export const getPickMock = () => [getGetReceivedPickListMockHandler()];
