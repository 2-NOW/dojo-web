/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  DojoApiResponseLocalDateTime,
  DojoApiResponsePickId,
  DojoApiResponsePickOpenResponse,
  DojoApiResponsePickPaging,
  DojoApiResponseReceivedPickListGetResponse
} from '.././model'

export const getCreate1ResponseMock = (overrideResponse: Partial< DojoApiResponsePickId > = {}): DojoApiResponsePickId => ({data: faker.helpers.arrayElement([{value: faker.word.sample()}, undefined]), error: faker.helpers.arrayElement([{code: faker.word.sample(), message: faker.helpers.arrayElement([faker.word.sample(), undefined])}, undefined]), success: faker.datatype.boolean(), ...overrideResponse})

export const getOpenPickResponseMock = (overrideResponse: Partial< DojoApiResponsePickOpenResponse > = {}): DojoApiResponsePickOpenResponse => ({data: faker.helpers.arrayElement([{pickId: faker.word.sample(), pickOpenItemDto: faker.helpers.arrayElement(['GENDER','PLATFORM','MID_INITIAL_NAME','FULL_NAME'] as const), value: faker.word.sample()}, undefined]), error: faker.helpers.arrayElement([{code: faker.word.sample(), message: faker.helpers.arrayElement([faker.word.sample(), undefined])}, undefined]), success: faker.datatype.boolean(), ...overrideResponse})

export const getGetReceivedPickListResponseMock = (overrideResponse: Partial< DojoApiResponseReceivedPickListGetResponse > = {}): DojoApiResponseReceivedPickListGetResponse => ({data: faker.helpers.arrayElement([{pickList: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({latestPickedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, pickId: faker.word.sample(), questionContent: faker.word.sample(), questionEmojiImageUrl: faker.word.sample(), questionId: faker.word.sample(), totalReceivedPickCount: faker.number.int({min: undefined, max: undefined})})), sort: faker.helpers.arrayElement(['LATEST','MOST_PICKED'] as const)}, undefined]), error: faker.helpers.arrayElement([{code: faker.word.sample(), message: faker.helpers.arrayElement([faker.word.sample(), undefined])}, undefined]), success: faker.datatype.boolean(), ...overrideResponse})

export const getGetPickDetailResponseMock = (overrideResponse: Partial< DojoApiResponsePickPaging > = {}): DojoApiResponsePickPaging => ({data: faker.helpers.arrayElement([{isFirst: faker.datatype.boolean(), isLast: faker.datatype.boolean(), picks: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({latestPickedAt: `${faker.date.past().toISOString().split('.')[0]}Z`, pickerFullName: faker.word.sample(), pickerFullNameOpen: faker.datatype.boolean(), pickerGender: faker.helpers.arrayElement(['MALE','FEMALE','UNKNOWN'] as const), pickerGenderOpen: faker.datatype.boolean(), pickerId: faker.word.sample(), pickerIdOpen: faker.datatype.boolean(), pickerOrdinal: faker.number.int({min: undefined, max: undefined}), pickerPlatform: faker.helpers.arrayElement(['SPRING','WEB','NODE','ANDROID','IOS','DESIGN','UNKNOWN'] as const), pickerPlatformOpen: faker.datatype.boolean(), pickerSecondInitialName: faker.word.sample(), pickerSecondInitialNameOpen: faker.datatype.boolean(), pickId: faker.word.sample()})), questionContent: faker.word.sample(), questionEmojiImageUrl: faker.word.sample(), questionId: faker.word.sample(), totalElements: faker.number.int({min: undefined, max: undefined}), totalPage: faker.number.int({min: undefined, max: undefined}), totalReceivedPickCount: faker.number.int({min: undefined, max: undefined})}, undefined]), error: faker.helpers.arrayElement([{code: faker.word.sample(), message: faker.helpers.arrayElement([faker.word.sample(), undefined])}, undefined]), success: faker.datatype.boolean(), ...overrideResponse})

export const getGetNextPickTimeResponseMock = (overrideResponse: Partial< DojoApiResponseLocalDateTime > = {}): DojoApiResponseLocalDateTime => ({data: faker.helpers.arrayElement([`${faker.date.past().toISOString().split('.')[0]}Z`, undefined]), error: faker.helpers.arrayElement([{code: faker.word.sample(), message: faker.helpers.arrayElement([faker.word.sample(), undefined])}, undefined]), success: faker.datatype.boolean(), ...overrideResponse})


export const getCreate1MockHandler = (overrideResponse?: DojoApiResponsePickId | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<DojoApiResponsePickId> | DojoApiResponsePickId)) => {
  return http.post('http://dojo-backend-eb-env.eba-33qhzuax.ap-northeast-2.elasticbeanstalk.com/pick', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreate1ResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getOpenPickMockHandler = (overrideResponse?: DojoApiResponsePickOpenResponse | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<DojoApiResponsePickOpenResponse> | DojoApiResponsePickOpenResponse)) => {
  return http.post('http://dojo-backend-eb-env.eba-33qhzuax.ap-northeast-2.elasticbeanstalk.com/pick/:id/open', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getOpenPickResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetReceivedPickListMockHandler = (overrideResponse?: DojoApiResponseReceivedPickListGetResponse | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<DojoApiResponseReceivedPickListGetResponse> | DojoApiResponseReceivedPickListGetResponse)) => {
  return http.get('http://dojo-backend-eb-env.eba-33qhzuax.ap-northeast-2.elasticbeanstalk.com/pick/picked-list', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetReceivedPickListResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetPickDetailMockHandler = (overrideResponse?: DojoApiResponsePickPaging | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<DojoApiResponsePickPaging> | DojoApiResponsePickPaging)) => {
  return http.get('http://dojo-backend-eb-env.eba-33qhzuax.ap-northeast-2.elasticbeanstalk.com/pick/picked-detail', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetPickDetailResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getGetNextPickTimeMockHandler = (overrideResponse?: DojoApiResponseLocalDateTime | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<DojoApiResponseLocalDateTime> | DojoApiResponseLocalDateTime)) => {
  return http.get('http://dojo-backend-eb-env.eba-33qhzuax.ap-northeast-2.elasticbeanstalk.com/pick/next-pick-time', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetNextPickTimeResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getPickMock = () => [
  getCreate1MockHandler(),
  getOpenPickMockHandler(),
  getGetReceivedPickListMockHandler(),
  getGetPickDetailMockHandler(),
  getGetNextPickTimeMockHandler()
]
