/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useQuery } from "@tanstack/react-query";
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import { customInstance } from "../../apis/custom-client";
import type { ErrorType } from "../../apis/custom-client";
import type {
  DojoApiResponseReceivedPickListGetResponse,
  GetReceivedPickListParams,
} from ".././model";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * ÎÇ¥Í∞Ä Î∞õÏùÄ ÌîΩÎì§ÏùÑ Ï†ïÎ†¨ÌïòÏó¨ Î≥¥Ïó¨Ï£ºÎäî API. default sort : ÏµúÏã† Ïàú
 * @summary ÎÇ¥Í∞Ä Î∞õÏùÄ ÌîΩ List API
 */
export const getReceivedPickList = (
  params?: GetReceivedPickListParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<DojoApiResponseReceivedPickListGetResponse>(
    {
      url: "http://dojo-backend-eb-env.eba-33qhzuax.ap-northeast-2.elasticbeanstalk.com/pick/picked-list",
      method: "GET",
      params,
      signal,
    },
    options,
  );
};

export const getGetReceivedPickListQueryKey = (
  params?: GetReceivedPickListParams,
) => {
  return [
    "http://dojo-backend-eb-env.eba-33qhzuax.ap-northeast-2.elasticbeanstalk.com/pick/picked-list",
    ...(params ? [params] : []),
  ] as const;
};

export const getGetReceivedPickListQueryOptions = <
  TData = Awaited<ReturnType<typeof getReceivedPickList>>,
  TError = ErrorType<unknown>,
>(
  params?: GetReceivedPickListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReceivedPickList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetReceivedPickListQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getReceivedPickList>>
  > = ({ signal }) => getReceivedPickList(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getReceivedPickList>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetReceivedPickListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReceivedPickList>>
>;
export type GetReceivedPickListQueryError = ErrorType<unknown>;

/**
 * @summary ÎÇ¥Í∞Ä Î∞õÏùÄ ÌîΩ List API
 */
export const useGetReceivedPickList = <
  TData = Awaited<ReturnType<typeof getReceivedPickList>>,
  TError = ErrorType<unknown>,
>(
  params?: GetReceivedPickListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReceivedPickList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetReceivedPickListQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
