/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DojoApiResponseListFriendInfoResponse
} from '.././model'
import { customInstance } from '../../apis/custom-client';
import type { ErrorType } from '../../apis/custom-client';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Ï∂îÏ≤ú ÏπúÍµ¨ Î™©Î°ùÏùÑ Ï°∞ÌöåÌïòÎäî API
 * @summary Ï∂îÏ≤ú ÏπúÍµ¨ Î™©Î°ù Ï°∞Ìöå API
 */
export const getRecommendFriends = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<DojoApiResponseListFriendInfoResponse>(
      {url: `https://docker-ecs.net/recommend-friends`, method: 'GET', signal
    },
      options);
    }
  

export const getGetRecommendFriendsQueryKey = () => {
    return [`https://docker-ecs.net/recommend-friends`] as const;
    }

    
export const getGetRecommendFriendsQueryOptions = <TData = Awaited<ReturnType<typeof getRecommendFriends>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecommendFriends>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetRecommendFriendsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getRecommendFriends>>> = ({ signal }) => getRecommendFriends(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getRecommendFriends>>, TError, TData> & { queryKey: QueryKey }
}

export type GetRecommendFriendsQueryResult = NonNullable<Awaited<ReturnType<typeof getRecommendFriends>>>
export type GetRecommendFriendsQueryError = ErrorType<unknown>

/**
 * @summary Ï∂îÏ≤ú ÏπúÍµ¨ Î™©Î°ù Ï°∞Ìöå API
 */
export const useGetRecommendFriends = <TData = Awaited<ReturnType<typeof getRecommendFriends>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getRecommendFriends>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetRecommendFriendsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * ÎÇ¥ ÏπúÍµ¨ Î™©Î°ùÏùÑ Ï°∞ÌöåÌïòÎäî API
 * @summary ÎÇ¥ ÏπúÍµ¨ Î™©Î°ù Ï°∞Ìöå API
 */
export const getFriends = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<DojoApiResponseListFriendInfoResponse>(
      {url: `https://docker-ecs.net/friends`, method: 'GET', signal
    },
      options);
    }
  

export const getGetFriendsQueryKey = () => {
    return [`https://docker-ecs.net/friends`] as const;
    }

    
export const getGetFriendsQueryOptions = <TData = Awaited<ReturnType<typeof getFriends>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFriends>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetFriendsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getFriends>>> = ({ signal }) => getFriends(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getFriends>>, TError, TData> & { queryKey: QueryKey }
}

export type GetFriendsQueryResult = NonNullable<Awaited<ReturnType<typeof getFriends>>>
export type GetFriendsQueryError = ErrorType<unknown>

/**
 * @summary ÎÇ¥ ÏπúÍµ¨ Î™©Î°ù Ï°∞Ìöå API
 */
export const useGetFriends = <TData = Awaited<ReturnType<typeof getFriends>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getFriends>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetFriendsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



