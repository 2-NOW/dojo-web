/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  DojoApiResponseString
} from '.././model'
import { customInstance } from '../../apis/custom-client';
import type { ErrorType } from '../../apis/custom-client';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Sample API ÏûÖÎãàÎã§Ïöî
 * @summary Sample API
 */
export const test1 = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<DojoApiResponseString>(
      {url: `https://docker-ecs.net/test/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getTest1QueryKey = (id: string,) => {
    return [`https://docker-ecs.net/test/${id}`] as const;
    }

    
export const getTest1QueryOptions = <TData = Awaited<ReturnType<typeof test1>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof test1>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTest1QueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof test1>>> = ({ signal }) => test1(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof test1>>, TError, TData> & { queryKey: QueryKey }
}

export type Test1QueryResult = NonNullable<Awaited<ReturnType<typeof test1>>>
export type Test1QueryError = ErrorType<unknown>

/**
 * @summary Sample API
 */
export const useTest1 = <TData = Awaited<ReturnType<typeof test1>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof test1>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getTest1QueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



