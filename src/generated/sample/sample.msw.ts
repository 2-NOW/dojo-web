/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  DojoApiResponseString
} from '.././model'

export const getTestResponseMock = (overrideResponse: Partial< DojoApiResponseString > = {}): DojoApiResponseString => ({data: faker.helpers.arrayElement([faker.word.sample(), undefined]), error: faker.helpers.arrayElement([{code: faker.word.sample(), message: faker.helpers.arrayElement([faker.word.sample(), undefined])}, undefined]), success: faker.datatype.boolean(), ...overrideResponse})


export const getTestMockHandler = (overrideResponse?: DojoApiResponseString | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<DojoApiResponseString> | DojoApiResponseString)) => {
  return http.get('http://dojo-backend-eb-env.eba-33qhzuax.ap-northeast-2.elasticbeanstalk.com/test/:id', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getTestResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getSampleMock = () => [
  getTestMockHandler()
]
