/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  SseEmitter,
  TestParams
} from '.././model'
import { customInstance } from '../../apis/custom-client';
import type { ErrorType } from '../../apis/custom-client';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * 해당 API 요청자에게 event가 발송됩니다.
 * @summary 알림 테스트를 위해 사용합니다.
 */
export const test = (
    params: TestParams,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `https://docker-ecs.net/notification-test`, method: 'POST',
        params
    },
      options);
    }
  


export const getTestMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof test>>, TError,{params: TestParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof test>>, TError,{params: TestParams}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof test>>, {params: TestParams}> = (props) => {
          const {params} = props ?? {};

          return  test(params,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type TestMutationResult = NonNullable<Awaited<ReturnType<typeof test>>>
    
    export type TestMutationError = ErrorType<unknown>

    /**
 * @summary 알림 테스트를 위해 사용합니다.
 */
export const useTest = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof test>>, TError,{params: TestParams}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof test>>,
        TError,
        {params: TestParams},
        TContext
      > => {

      const mutationOptions = getTestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary 알림을 받기 위해 SSE 커넥션을 연결합니다, timeout: 3분
 */
export const stream = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<SseEmitter>(
      {url: `https://docker-ecs.net/notification-stream`, method: 'GET', signal
    },
      options);
    }
  

export const getStreamQueryKey = () => {
    return [`https://docker-ecs.net/notification-stream`] as const;
    }

    
export const getStreamQueryOptions = <TData = Awaited<ReturnType<typeof stream>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stream>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getStreamQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof stream>>> = ({ signal }) => stream(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof stream>>, TError, TData> & { queryKey: QueryKey }
}

export type StreamQueryResult = NonNullable<Awaited<ReturnType<typeof stream>>>
export type StreamQueryError = ErrorType<unknown>

/**
 * @summary 알림을 받기 위해 SSE 커넥션을 연결합니다, timeout: 3분
 */
export const useStream = <TData = Awaited<ReturnType<typeof stream>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof stream>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getStreamQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



