/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  SseEmitter
} from '.././model'

export const getStreamResponseMock = (overrideResponse: Partial< SseEmitter > = {}): SseEmitter => ({timeout: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), ...overrideResponse})


export const getTestMockHandler = () => {
  return http.post('https://docker-ecs.net/notification-test', async () => {await delay(1000);
    return new HttpResponse(null,
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getStreamMockHandler = (overrideResponse?: SseEmitter | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<SseEmitter> | SseEmitter)) => {
  return http.get('https://docker-ecs.net/notification-stream', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getStreamResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getNotificationSseControllerMock = () => [
  getTestMockHandler(),
  getStreamMockHandler()
]
