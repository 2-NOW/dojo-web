/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  QuestionSheetsGetResponse
} from '.././model'
import { customInstance } from '../../apis/custom-client';
import type { ErrorType } from '../../apis/custom-client';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * 현재 운영중인 질문지에 대해 질문 및 질문 별 후보자들을 반환합니다.이미 기존에 동일한 요청에 대해서 투표를 완료했다면, 질문 리스트는 투표를 완료한 수 만큼 제외하여 응답에 제공됩니다.(기존에 질문세트에 대한 모든 투표를 완료했다면, 질문 리스트는 빈 리스트가 반환됩니다.)
 * @summary 현재 운영중인 질문지에 대한 투표지 정보 조회
 */
export const getQuestionSheet = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<QuestionSheetsGetResponse>(
      {url: `http://dojo-backend-eb-env.eba-33qhzuax.ap-northeast-2.elasticbeanstalk.com/question`, method: 'GET', signal
    },
      options);
    }
  

export const getGetQuestionSheetQueryKey = () => {
    return [`http://dojo-backend-eb-env.eba-33qhzuax.ap-northeast-2.elasticbeanstalk.com/question`] as const;
    }

    
export const getGetQuestionSheetQueryOptions = <TData = Awaited<ReturnType<typeof getQuestionSheet>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuestionSheet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetQuestionSheetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getQuestionSheet>>> = ({ signal }) => getQuestionSheet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getQuestionSheet>>, TError, TData> & { queryKey: QueryKey }
}

export type GetQuestionSheetQueryResult = NonNullable<Awaited<ReturnType<typeof getQuestionSheet>>>
export type GetQuestionSheetQueryError = ErrorType<unknown>

/**
 * @summary 현재 운영중인 질문지에 대한 투표지 정보 조회
 */
export const useGetQuestionSheet = <TData = Awaited<ReturnType<typeof getQuestionSheet>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getQuestionSheet>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetQuestionSheetQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



