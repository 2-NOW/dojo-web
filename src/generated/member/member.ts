/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import { customInstance } from "../../apis/custom-client";
import type { BodyType, ErrorType } from "../../apis/custom-client";
import type {
  DojoApiResponseMemberCreateResponse,
  MemberCreateRequest,
} from ".././model";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

/**
 * 멤버 가입 시 사용하는 API. 현재 ID 제외(auto generation) 별도의 unique 값은 없어요.
 * @summary 멤버 가입 API
 */
export const create = (
  memberCreateRequest: BodyType<MemberCreateRequest>,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<DojoApiResponseMemberCreateResponse>(
    {
      url: "http://dojo-backend-eb-env.eba-33qhzuax.ap-northeast-2.elasticbeanstalk.com/member",
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: memberCreateRequest,
    },
    options,
  );
};

export const getCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof create>>,
    TError,
    { data: BodyType<MemberCreateRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof create>>,
  TError,
  { data: BodyType<MemberCreateRequest> },
  TContext
> => {
  const { mutation: mutationOptions, request: requestOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof create>>,
    { data: BodyType<MemberCreateRequest> }
  > = (props) => {
    const { data } = props ?? {};

    return create(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof create>>
>;
export type CreateMutationBody = BodyType<MemberCreateRequest>;
export type CreateMutationError = ErrorType<unknown>;

/**
 * @summary 멤버 가입 API
 */
export const useCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof create>>,
    TError,
    { data: BodyType<MemberCreateRequest> },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof create>>,
  TError,
  { data: BodyType<MemberCreateRequest> },
  TContext
> => {
  const mutationOptions = getCreateMutationOptions(options);

  return useMutation(mutationOptions);
};
