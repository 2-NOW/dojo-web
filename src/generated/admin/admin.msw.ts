/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  DojoApiResponseListQuestionId,
  DojoApiResponseQuestionId,
  DojoApiResponseQuestionSetId
} from '.././model'

export const getCreateQuestionResponseMock = (overrideResponse: Partial< DojoApiResponseQuestionId > = {}): DojoApiResponseQuestionId => ({data: faker.helpers.arrayElement([{value: faker.word.sample()}, undefined]), error: faker.helpers.arrayElement([{code: faker.word.sample(), message: faker.helpers.arrayElement([faker.word.sample(), undefined])}, undefined]), success: faker.datatype.boolean(), ...overrideResponse})

export const getBulkCreateQuestionResponseMock = (overrideResponse: Partial< DojoApiResponseListQuestionId > = {}): DojoApiResponseListQuestionId => ({data: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({value: faker.word.sample()})), undefined]), error: faker.helpers.arrayElement([{code: faker.word.sample(), message: faker.helpers.arrayElement([faker.word.sample(), undefined])}, undefined]), success: faker.datatype.boolean(), ...overrideResponse})

export const getCreateCustomQuestionSetResponseMock = (overrideResponse: Partial< DojoApiResponseQuestionSetId > = {}): DojoApiResponseQuestionSetId => ({data: faker.helpers.arrayElement([{value: faker.word.sample()}, undefined]), error: faker.helpers.arrayElement([{code: faker.word.sample(), message: faker.helpers.arrayElement([faker.word.sample(), undefined])}, undefined]), success: faker.datatype.boolean(), ...overrideResponse})


export const getCreateQuestionMockHandler = (overrideResponse?: DojoApiResponseQuestionId | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<DojoApiResponseQuestionId> | DojoApiResponseQuestionId)) => {
  return http.post('http://dojo-backend-eb-env.eba-33qhzuax.ap-northeast-2.elasticbeanstalk.com/admin/question', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateQuestionResponseMock()),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getBulkCreateQuestionMockHandler = (overrideResponse?: DojoApiResponseListQuestionId | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<DojoApiResponseListQuestionId> | DojoApiResponseListQuestionId)) => {
  return http.post('http://dojo-backend-eb-env.eba-33qhzuax.ap-northeast-2.elasticbeanstalk.com/admin/question-bulk', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getBulkCreateQuestionResponseMock()),
      {
        status: 201,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}

export const getCreateCustomQuestionSetMockHandler = (overrideResponse?: DojoApiResponseQuestionSetId | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<DojoApiResponseQuestionSetId> | DojoApiResponseQuestionSetId)) => {
  return http.post('http://dojo-backend-eb-env.eba-33qhzuax.ap-northeast-2.elasticbeanstalk.com/admin/custom-question-set', async (info) => {await delay(1000);
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getCreateCustomQuestionSetResponseMock()),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
        }
      }
    )
  })
}
export const getAdminMock = () => [
  getCreateQuestionMockHandler(),
  getBulkCreateQuestionMockHandler(),
  getCreateCustomQuestionSetMockHandler()
]
